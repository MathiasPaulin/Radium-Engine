@startuml

title HelloRadium sequence\n
HelloRadium -> BaseApplication ++ : create()
    BaseApplication -> Engine : Engine::initialize()
    Engine -> EntityManager : create()
    note right Engine
    See diagram
    //Engine initialization sequence//
    end note
    Engine -> RenderObjectManager : create();

    BaseApplication -> GeometrySystem : instantiate( GeometrySystem )

    BaseApplication -> Engine : registerSystem( GeometrySystem )

    BaseApplication -> SimpleWindow : instantiate( SimpleWindow )
    SimpleWindow -> Viewer : create()

    BaseApplication -> SimpleWindow : show()
    SimpleWindow -> Viewer : show()
    Viewer -> SimpleWindow : initializedOpenGL()

    SimpleWindow -> ForwardRenderer : instantiate( ForwardRenderer )
    note right SimpleWindow
    Modify SimpleWindow so that it does not automatically
    instanciate the Forward Renderer but a user specified one.
    end note
    SimpleWindow -> Viewer : addRenderer( ForwardRenderer )
return

activate HelloRadium
    HelloRadium -> HelloRadium : build a mesh
    HelloRadium -> HelloRadium : build the appearance

    HelloRadium -> EntityManager : createEntity()
    HelloRadium <- EntityManager : entity
    note right HelloRadium
    See diagram //Populating the scene//
    end note
    HelloRadium -> TriangleMeshComponent ++ : createComponent("name", entity, mesh, appearance)
        TriangleMeshComponent -> RenderObject : build and parameterize render object
        note right TriangleMeshComponent
        See the diagram
        //Radium render object creation//
        end note
        TriangleMeshComponent -> RenderObjectManager : add render object
    return  component
    HelloRadium -> GeometrySystem : addComponent( entity, component );
deactivate HelloRadium

HelloRadium -> SimpleWindow ++ : postLoadFile()
note over Engine
This method should be renamed.
This method must ensure that all the active render objects are correctly compiled for the current renderer
So, rename it to compileScene that aims at:
  - computing the bounding box (even approximated) of the scene
  - making the currently bound renderer to build the appropriate render technique from the properties
  set on the components/renderObjects.
end note
    SimpleWindow -> Viewer : getRenderer()
    SimpleWindow <- Viewer : renderer
    SimpleWindow -> ForwardRenderer ++ : renderer.buildAllRenderTechniques()
        ForwardRenderer -> RenderObjectManager : getRenderObject()
        ForwardRenderer <- RenderObjectManager : ro
        ForwardRenderer -> RenderTechnique : build render passes on ro
        note over RenderObject
                    See the diagram
                    //Render technique creation//
                    end note
        ForwardRenderer -> RenderObjectManager : update (ro)
    return
return

HelloRadium -> BaseApplication ++ : exec
    BaseApplication -> Viewer ++ : startRendering
        Viewer -> ForwardRenderer ++ : render()
            ForwardRenderer -> RenderObject : render
            note over TriangleMeshComponent
            See the diagram
            //Radium rendering sequence//
            end note
            note left Viewer
            Only render one frame
            end note
        return
    return
return

HelloRadium -> BaseApplication ++ : destroy
    BaseApplication -> Engine : cleanup and destroy
return

@enduml
